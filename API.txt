////////////////////////////////////
n// API: Component, wrap RaphaelJS //
////////////////////////////////////

- Component (abstraction d'un objet graphique)
  moveTo(new cx, new cy, [duration = 0, [delai = 0]])
 nn hide()
  show()
  delete()
  drag(move,start,end)
  ....

  
///////////////////////
// API: Couche basse //
///////////////////////


Principe général:
-----------------

Dans cette couche, on a 4 grands types d'objets:
- Un DraggableObject est un objet graphique destiné à être déplacé
par drag and drop à la souris.
- Une Cell peut contenir un ensemble de DraggableObject (souvent une
Cell ne contiendra jamais plus d'un DraggableObject à la fois).
- Une DropArea définit une zone qui réagit lorsqu'un DraggableObject
est relaché à l'intérieur.
- Le DragAndDropSystem qui permet de régir le tout.

	Considérons un syteme DragAndDropSytem myDragAndDropSystem
avec un DraggableObject myDraggable appartenant à une Cell myCell.
L'objet myDraggable est alors dans l'état "contained" et l'on
peut accéder à myCell par myDraggable.getCurrentCell(). Lorsque l'utilisateur clique 
sur myDraggable, la méthode myDragAndDropSystem.canStartDrag(myDraggable) est invoquée. 
Si la valeur renvoyée est false alors myDraggable reste immobile et rien 
ne se passe, dans le cas contraire, le callback
myDragAndDropSystem.runActionsStartDrag(myDraggable)
est appelé puis le dragging s'enclenche et myDraggable se met à suivre la souris.

	Lorsque le dragging commence, l'objet est dans un premier temps toujours 
dans l'état "contained" (il appartient toujours à myCell et retourne a 
sa position précédente s'il est laché) et à chaque mouvement
la méthode myCell.hasLeft(myDraggable) est appelée. Ce n'est que lorsque
myCell.hasLeft(myDraggable) renvoie une valeur differente de false, 
que myDraggable se détache réellement de myCell et passe dans l'état "free"
(on peut toujours accéder à myCell, mais il faut alors écrire,
myDraggable.getLastCell()), une fois le detachement fait, la méthode 
myDragAndDropSystems.runActionsDetached(myDraggable) est appelé.
Cette première phase peut sembler superflue mais
elle est très utile en pratique car elle permet notamment de laisser 
un peu de marge à l'utilisateur pour renoncer à un mouvement.

	Dans l'état "free", myDraggable suit le mouvement de la souris tant
que l'utilisateur ne relache pas le clique, et est associé à tout instant
à une DropArea à laquelle on peut acceder par myDraggable.GetCurrentDropArea(). 
Chaque fois que myDraggable est déplacé dans l'état "free", la DropArea
correspondante est recalculée selon un procédé décrit ci-après, si celle-ci
est différente de la précédente, alors, dans l'ordre:
		a) le callback myDragAndDropSystem.runActionsEndOver(myDraggable) est appelé
		b) la DropArea de myDraggable est mise à jour
		c) le callback myDragAndDropSystem.runActionsOver(myDraggable) est appelé
(NB: Au moment où myDraggable passe à l'état "free", b) et c) sont aussi
successivement appelés juste après le callback myDragAndDropSystem.runActionsWhenHasBeenDetached(myDraggable))
	Dans tous les cas, myDragAndDropSystem.runActionsWhenHasMoved(myDraggable,dx,dy)
est ensuite appelée (Remarque: dx et dy indiquent que l'objet a bougé de (dx,dy), le mouvement
est donc deja fait au moment de l'appel).

Détaillons comment le calcul de la DropArea est fait: 
Les DropArea du DragAndDropSystem sont appelées de la plus superficielle
a la plus profonde, chaque fois que l'on considère une DropArea myDropArea
myDropArea.doesContain(myDraggable) étant appelée. Si la valeur
false est retournée, alors on passe a la DropArea suivante. Sinon 
myDragAndDropSystem.doesAccept(myDraggable,myDropArea) est appelée.
De meme, si la valeur renvoyée est fausse, alors on passe à la DropArea suivante.
Sinon c'est myDropArea qui est séléctionnée et la boucle est interrompue.
Si aucune DropArea n'a été acceptée, alors la valeur undefined est
selectionnée.

	Enfin, si myDraggable est relaché par l'utilisateur dans l'état "free",
le callback myDragAndDropSystem.findNewCell(myDraggable) est appelé.
Si ce callback ne renvoie pas un objet de type Cell contenu dans la liste des Cell connues
par myDragAndDropSystem, alors successivement: 
	a) myDragAndDropSystem.runActionsBeforeDestroyed(myDraggable) est appelée
	b) myDraggable est détruit
Si au contraire il renvoie un objet de type 
Cell myNewCell "valide", myDraggable repasse dans l'etat "contained"
et est attaché à myNewCell (notamment la "current cell" de myDraggable prend la
valeur myNewCell, la Cell précédente étant toujours accessible par
myDraggable.getLastCell()), puis le callback 
myDragAndDropSystem.runActionsWhenHasBeenDropped(myDraggable) est appelé.


Principaux Callbacks et valeur par défaut
-----------------------------------------

DragAndDropSystem:



Création des objets et callback par défaut:
-------------------------------------------

// TODO
	
		
/////////////////////
// API: Containers //
/////////////////////

ListCellContainer: 
  - GetNbCells()
  - GetCell(i)
	
	

	
	
	
	
	
